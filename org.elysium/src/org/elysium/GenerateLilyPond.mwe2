module org.elysium.LilyPond

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/elysium/LilyPond.xtext"
var file.extensions = "ly,ily,lyi"
var projectName = "org.elysium"
var runtimeProject = "../${projectName}"

Workflow {

	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.test/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathTestProject ="${runtimeProject}.test"
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"

		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			fragment = grammarAccess.GrammarAccessFragment {}

			fragment = ecore.EMFGeneratorFragment {}

			fragment = serializer.SerializerFragment {}

			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			fragment =parser.antlr.ex.rt.AntlrGeneratorFragment {
				antlrParam = "-Xconversiontimeout" 
				antlrParam = "20000"
				options = {
					backtrack = true
				}
			}

			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			fragment = scoping.ImportURIScopingFragment {}
			fragment = exporting.SimpleNamesFragment {}

			fragment = formatting.FormatterFragment {}

			fragment = labeling.LabelProviderFragment {}

			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			fragment = contentAssist.JavaBasedContentAssistFragment {}

			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
				antlrParam = "-Xconversiontimeout" 
				antlrParam = "20000"
				options = {
					backtrack = true
				}
			}

			fragment = builder.BuilderIntegrationFragment {}

			fragment = quickfix.QuickfixProviderFragment {}
			
			fragment = refactoring.RefactorElementNameFragment {}
			
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}

			fragment= junit.Junit4Fragment {}
		}
	}

}

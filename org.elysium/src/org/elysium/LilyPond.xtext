grammar org.elysium.LilyPond hidden(WS, SL_COMMENT, ML_COMMENT)

generate lilypond "http://www.elysium.org/LilyPond"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LilyPond: {LilyPond} expressions+=Expression*;

Expression: Assignment | SimpleSchemeAssignment | CommonExpression;

CommonExpression: Command | Block | Scheme | Number | Text;

Assignment: name=(SchemeIdentifier | STRING) "=" value=Expression;
SimpleSchemeAssignment returns Assignment: "#" "(" "define" name=ID value=Text ")";

Block: SimpleBlock | SimultaneousBlock;

SimpleBlock: {SimpleBlock} "{" expressions+=Expression* "}";

SimultaneousBlock: {SimultaneousBlock} "<<" expressions+=Expression* ">>";

Command: SpecialCommand | Reference | StringIndication;

SpecialCharacter: "!" | "?" | "+" | "<" | ">" | "[" | "]" | "~";

UnparsedBlock: {UnparsedBlock} "{" expressions+=UnparsedExpression* "}";

UnparsedExpression: BlockCommand | Include | Assignment | UnparsedCommand | UnparsedBlock | Scheme | Number | Text;

UnparsedCommand: "\\" command=(SchemeIdentifier | SpecialCommandName);

Reference: "\\" assignment=[Assignment|SchemeIdentifier];

Text: value=(SchemeTextValueSegment | "(" | ")" | "'" | "," | ":");

Number: value=INT;

// Commands

SpecialCommand: Include | Version | SourceFileName | SourceFileLine | Markup | MarkupLines | MarkupList | BlockCommand | OutputDefinition | RelativeMusic | TransposedMusic | ModeChange | MusicWithLyrics | NewContext | ContextDef | Other;

Include: "\\" keyword="include" (importURI=STRING | '\\'Identifier);

Version: "\\" keyword="version" version=STRING;

SourceFileName: "\\" keyword="sourcefilename" filename=STRING;

SourceFileLine: "\\" keyword="sourcefileline" line=INT;

Markup: "\\" ->(keyword="markup" body=MarkupBody); // XXX very messy 

MarkupLines: "\\" ->(keyword="markuplines" body=MarkupBody);

MarkupList: "\\" ->(keyword=("markuplist") body=MarkupBody);

//I split up Scheme/SchemeText, using special definitions for the MarkupBody-Command-case
//so that I can enforce different hidden-Definitions
//that way I can prevent the eating up of assignments that start on a new line without indentation
MarkupBody: {MarkupBody} command+=(Scheme | SchemeText | UnparsedCommand)* block=UnparsedBlock? ASSIGNMENT_NL; // XXX SchemeText? see tocItemWithDotsMarkup

BlockCommand: "\\" keyword=("book" | "bookpart" | "header" | "score") block=SimpleBlock;

OutputDefinition: "\\" keyword=("paper" | "midi" | "layout") block=UnparsedBlock;

RelativeMusic: "\\" keyword="relative" pitch=Pitch? music=Expression;

Pitch: base=ID octaveCheck?="="? octaveShift=Octave? reminderAccidental?="!"? cautionaryAccidental?="?"?;

Octave: up+="'"+ | down+=","+;

TransposedMusic: "\\" keyword="transpose" source=Pitch target=Pitch music=Expression;
 
ModeChange: "\\" keyword=("chordmode" | "drummode" | "figuremode" | "lyricmode" | "notemode") music=Block;

MusicWithLyrics: "\\" keyword="lyricsto" id=(ID | STRING) lyrics=Expression;

NewContext: "\\" keyword=("new" | "context") context=ID ("=" id=(ID | STRING))? modification=ContextModification? music=Expression;

ContextModification: "\\" "with" block=UnparsedBlock;

ContextDef: "\\" keyword="context" block=UnparsedBlock;

StringIndication: "\\" string=INT;

Other: "\\" keyword=(SpecialCharacter | "(" | ")" | OtherName);

OtherName: "accepts" | "addlyrics" | "alias" | "alternative" | "change" | "chords" | "consists" | "default" | "defaultchild" | "denies" | "description" | "drums" | "figures" | "lyrics" | "maininput" | "name" | "objectid" | "octave" | "override" | "remove" | "repeat" | "rest" | "revert" | "sequential" | "set" | "simultaneous" | "tempo" | "type" | "unset" | "with";

SpecialCommandName: "define" | "include" | "version" | "sourcefilename" | "sourcefileline" | "markup" | "markuplines" | "markuplist" | "book" | "bookpart" | "context" | "header" | "score" | "paper" | "midi" | "layout" | "relative" | "transpose" | "chordmode" | "drummode" | "figuremode" | "lyricmode" | "notemode" | "lyricsto" | "new" | "with" | OtherName; // XXX this must duplicate all known commands 

// Scheme

Scheme hidden(WS, SL_COMMENT, ML_COMMENT, SCHEME_SL_COMMENT, SCHEME_ML_COMMENT): ("#" | "$") value=SchemeExpression;

SchemeExpression: quotations+=("'" | "`" | "," | "@")* reference?="$"? value=SchemeValue;

SchemeValue: SchemeBoolean | SchemeList | SchemeBlock | SchemeCharacter | SchemeNumber | SchemeText | SchemeMarkupCommand;

SchemeBoolean: value=SchemeBooleanValue;

SchemeBooleanValue returns ecore::EBoolean: "#" ID;

SchemeList: {SchemeList} vector?="#"? "(" expressions+=SchemeExpression* ("'" | ",")* ")";

SchemeBlock: "#{" elements+=Expression+ "#}";

//added "-" to List, there were tests failing because of that
SchemeCharacter: "#\\" value=(ID | SpecialCharacter | '-' | ANY_OTHER);

SchemeText: value=SchemeTextValue;

SchemeTextValue: SchemeTextValueSegment (":" ":"? SchemeTextValueSegment)*;

SchemeTextValueSegment: "\\\\" | "=" | "-" | SpecialCharacter | SchemeIdentifier | STRING | INT | ANY_OTHER;

SchemeIdentifier: Identifier ("-" Identifier)*;

Identifier: ID | SpecialCommandName;

SchemeNumber: radix=SchemeNumberRadix? value=SignedInteger;

SchemeNumberRadix: "#" ID;

SignedInteger: "-"? INT;

SchemeMarkupCommand: "#:" command=SchemeIdentifier;

// Terminals

//why was the STRING definition so restrictive wrt. escaping?
//if it's essential, semantic validation is a better alternative
//terminal STRING: '"' ("\\" ("a".."z" | "A".."Z" | '"' | "'" | "\\") | !("\\" | '"'))* '"';
terminal STRING: '"' ("\\" . | !("\\" | '"'))* '"';

terminal INT returns ecore::EInt: ("0".."9")+;

terminal ID: ("a".."z" | "A".."Z" | "¡".."ￜ")+;

//synthetic token inserted in order to mark the (assumed) end of a markup
terminal ASSIGNMENT_NL: "synthetic:ASSIGNMENT_NL";

terminal WS: (" " | "\t" | "\r" | "\n")+;

terminal SL_COMMENT: "%" !("\n" | "\r")* ("\r"? "\n")?;

terminal ML_COMMENT: "%{" -> "%}";

terminal SCHEME_SL_COMMENT: ";;" !("\n" | "\r")* ("\r"? "\n")?;

terminal SCHEME_ML_COMMENT: "#!" -> "!#";

terminal ANY_OTHER: .;
